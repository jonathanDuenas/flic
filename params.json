{"name":"Flic","tagline":"simple feature toggles","body":"# flic\r\n\r\nFlic is a lightweight [feature toggle library](http://martinfowler.com/bliki/FeatureToggle.html) for Clojure based loosely on [rolllout](https://github.com/FetLife/rollout).\r\n\r\nIt offers pluggable support for different storage mediums (in memory, redis, sql etc)\r\n\r\nIt can be used to control features around\r\n\r\n- specific users\r\n- groups of users (defined by a predicate)\r\n- percentage of users\r\n\r\nThe effects are componded.  So if you deactivate a specific user but they are part of a specific group or match against the baseline percentage of activated users they will still see the feature.  To this end - this is NOT an access control mechanism for restricting access.  Well its not intended to be anyway. YMMV.  \r\n\r\n## Usage\r\n\r\nGet it into your `project.clj` dependencies\r\n\r\n```clojure\r\n[flic \"0.0.1\"]\r\n```\r\n\r\nUse it.\r\n\r\n```clojure\r\n(require [flic.core :as flic])\r\n```\r\n\r\nFrom here we need to initialise a backing store that will be responsible for getting and setting features. The simplest one for now is the in memory store that uses an atom to persist the feature state.  We can set this by requiring the `flic.store` namespace (you can write your own as well, yes please).\r\n\r\n```clojure\r\n(ns examples\r\n  (require [flic.store :as store]\r\n           [flic.core :as flic])\r\n\r\n(flic/backing-store! (store/in-memory-store))\r\n```\r\n\r\nNow we can test what features each user has access to\r\n\r\n```clojure\r\n(if (flic/active? :my-feature user)\r\n  (do-some-awesome-feature-thing))\r\n```\r\n\r\nA user is a special-ish thing in the context of flic and we talk about that shortly.  But how do we actually __activate__ users?  Read on...\r\n\r\n## Users\r\n\r\nYou can activate and deactivate specific users.\r\n\r\n```clojure\r\n(flic/activate-user! :my-feature user)\r\n```\r\n\r\nThis will activate a user for a given feature (identified by `:my-feature` here).  A user, in the current version is a data strucutre that can produce a value when asked for `:id` e.g. { :id 1 :name \"James\" }.  This is currently not configurable.  Should it be?\r\n\r\nYou can deactivate this user in a similar way\r\n\r\n```clojure\r\n(flic/deactivate-user! :my-feature user)\r\n```\r\n\r\n## Groups\r\n\r\nGroups are clusters of users that you identify using a predicate.  To use these effectively you need to define the predicate for groups outside of the actual feature store.  If you fail to define a group and then activate that group the group test will always be false. So make sure you do, or make sure I find a better way to represent this.\r\n\r\nSo we start by defining a group (require the `flic.groups` namespace).\r\n\r\n```clojure\r\n(groups/define-group :best-people (fn [user] (= (:name user) \"James\")))\r\n```\r\n\r\nThis defines a group called `:best-people` that identifies all users whose name is `James` as a member of the group.\r\n\r\nWe can also define a a bunch of groups in one go.\r\n\r\n```clojure\r\n(groups/define-groups { :best-people  (fn [user] (= (:name user) \"James\"))\r\n                        :worst-people (fn [user] (not (= (:name user) \"James\"))) })\r\n```\r\n\r\nNow we can include these groups in our activation scenarios\r\n\r\n```clojure\r\n(flic/activate-group! :my-feature :best-people)\r\n```\r\n\r\nRemember if its not defined it just returns false for now.  I dont like this.  Help me change it please.\r\n\r\nDeactivating a group is not suprising.\r\n\r\n```clojure\r\n(flic/deactivate-group! :my-feature :best-people)\r\n```\r\n\r\nIf you want you can also check if a person belongs to a group using\r\n`(is-in-group? group user)`\r\n\r\n## Percentages\r\n\r\nFinally you can activate users via percentage of user base.  This is based on the id of the user and assumes its a number.  The percentages are rolling so activating 20% then upping it to 25% means the previous 20% will still be included in the activated people so it won't be all \"You're included\", \"You're not included\" nonsense as you roll out a new feature.\r\n\r\n```clojure\r\n(flic/activate-percentage! :my-feature 20)\r\n\r\n(flic/deactivate-percentage! :my-feature 20)\r\n```\r\n\r\n## Blanket (De)Activation\r\n\r\nYou can activate and deactivate everyone.  Say your feature is golden and good to go or perhaps your feature is broken you can use the `activate-all!` and `deactivate-all!` to make you happy.\r\n\r\n## License\r\n\r\nCopyright Â© 2014 James Hughes\r\n\r\nDistributed under the Eclipse Public License either version 1.0 or (at\r\nyour option) any later version.\r\n","google":"UA-19143623-5","note":"Don't delete this file! It's used internally to help with page regeneration."}